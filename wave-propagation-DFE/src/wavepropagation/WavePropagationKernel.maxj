/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial)
 * Chapter: 3      Example: 1      Name: Moving Average Simple
 * MaxFile name: MovingAverageSimple
 * Summary:
 * 	Computes a three point moving average over the input stream
 */

package wavepropagation;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;

class WavePropagationKernel extends Kernel {

	WavePropagationKernel(KernelParameters parameters, int nxMax) {
		super(parameters);
		DFEVar dtdx2 = io.scalarInput("dtdx2", dfeFloat(8, 24));
		DFEVar src_loc = io.scalarInput("src_loc", dfeUInt(32));
		DFEVar rcvr_z = io.scalarInput("rcvr_z", dfeUInt(16));
		OffsetExpr nx = stream.makeOffsetParam("nx", 1, nxMax);
		DFEVar nz = io.scalarInput("nz", dfeUInt(16));
		DFEVar cell_number = io.scalarInput("cell_number", dfeUInt(32));
		DFEVar nx_value = nx.getDFEVar(this).cast(dfeUInt(16));

		Count.Params cell_params = control.count.makeParams(32).withMax(cell_number).withInc(1);
		Counter cell = control.count.makeCounter(cell_params);
		
		Count.Params position_params = control.count.makeParams(16).withMax(nx_value).withInc(1);
		Counter position = control.count.makeCounter(position_params);
		DFEVar col_number = position.getCount();

		Count.Params line_params = control.count.makeParams(16).withEnable(position.getWrap()).withInc(1);
		Counter line = control.count.makeCounter(line_params);
		DFEVar row_number = line.getCount();

		Count.Params field_params = control.count.makeParams(2).withEnable(cell.getWrap()).withInc(1);
		Counter field_idx = control.count.makeCounter(field_params);
		DFEVar fidx = field_idx.getCount();
		
		Count.Params step_params = control.count.makeParams(16).withEnable(cell.getWrap()).withInc(1);
		Counter step = control.count.makeCounter(step_params);
		
		debug.simPrintf(cell.getWrap(), "Iteration: %d\n", step.getCount());
		DFEVar v = io.input("velocity", dfeFloat(8, 24));
		DFEVar q = io.input("absorb", dfeFloat(8, 24));
		DFEVar d = io.input("density", dfeFloat(8, 24));
		DFEVar signature = io.input("signature", dfeFloat(8, 24), cell.getCount().eq(src_loc));
		
		DFEVar one = io.input("fieldOne", dfeFloat(8, 24));
		DFEVar two = io.input("fieldTwo", dfeFloat(8, 24));
		DFEVar three = io.input("fieldThree", dfeFloat(8, 24));
		
		
		DFEVar p = control.mux(fidx, one, two, three);
		DFEVar c = control.mux(fidx, two, three, one);
		
		DFEVar d2z = stream.offset(c, -nx) * stream.offset(d, -nx) + 
				stream.offset(c, nx) * stream.offset(d, nx) - 2.0f * c * d;

		DFEVar d2x = stream.offset(c, -1) * stream.offset(d, -1) + 
				stream.offset(c, 1) * stream.offset(d, 1) - 2.0f * c * d;

		DFEVar result = ((d2x+d2z)*dtdx2*v*v/d + (2.0-q*q)*c - (1.0-q)*p) / (1.0+q);

		DFEVar r = col_number > 0 & col_number < nx_value-1 & row_number < nz - 2 & row_number > 0 ? result : 0;
		r = cell.getCount().eq(src_loc) & signature.neq(0) ? signature : r;
		

		io.output("outThree", r, dfeFloat(8, 24), fidx.eq(0));
		io.output("outTwo", r, dfeFloat(8, 24), fidx.eq(1));
		io.output("outOne", r, dfeFloat(8, 24), fidx.eq(2));

		io.output("output", r, dfeFloat(8, 24), row_number.eq(rcvr_z));
    }
}
